{"ast":null,"code":"let initialState = {\n  n: 0\n};\nlet CutomAction;\nexport function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"increament\":\n      return {\n        n: state.n + action.payload\n      };\n    case \"decreament\":\n      return {\n        n: state.n - action.payload\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"mappings":"AAUA,IAAIA,YAAY,GAAG;EACfC,CAAC,EAAE;CACN;AAED,IAAIC,WAGH;AAGD,OAAM,SAAUC,cAAc,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAmB;EACpE,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,YAAY;MACb,OAAO;QACHL,CAAC,EAAEG,KAAK,CAACH,CAAC,GAAGI,MAAM,CAACE;OACvB;IACL,KAAK,YAAY;MACb,OAAO;QACHN,CAAC,EAAEG,KAAK,CAACH,CAAC,GAAGI,MAAM,CAACE;OACvB;IACL;MACI,OAAOH,KAAK;EAAC;AAEzB","names":["initialState","n","CutomAction","counterReducer","state","action","type","payload"],"sourceRoot":"","sources":["/Users/akira/Documents/NgRx-Angular-training/src/app/store/store.ts"],"sourcesContent":["import { Action } from \"@ngrx/store\";\n\nexport interface StoreInterface{\n    counter: Counter\n}\n\ninterface Counter{\n    n: number\n}\n\nlet initialState = {\n    n: 0\n}\n\nlet CutomAction:{\n    type:string,\n    payload:any\n}\n\n\nexport function counterReducer(state = initialState, action: CutomAction) {\n    switch (action.type) {\n        case \"increament\":\n            return {\n                n: state.n + action.payload\n            }\n        case \"decreament\":\n            return {\n                n: state.n - action.payload\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}